<?php

namespace Tests\Mappers\Users;

use App\Entities\Users\BalanceEntity;
use App\Mappers\Users\BalanceMapper;
use Tests\TestCase;

class BalanceMapperTest extends TestCase
{
    private $balanceEntity;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stubs
        $this->setUpDependencies();
    }

    /**
     * @dataProvider provideBalanceData
     */
    public function testRevert($balanceDataExpected, $balanceEntity)
    {
        $balanceMapper = new BalanceMapper($balanceEntity);
        $balanceEntity = $balanceMapper->revert($balanceEntity);
        $this->assertEquals($balanceDataExpected, $balanceEntity);
    }

    /**
     * @dataProvider provideBalanceData
     */
    public function testMap($balanceData, $balanceEntityExpected)
    {
        $balanceMapper = new BalanceMapper($balanceEntityExpected);
        $balanceEntity = $balanceMapper->map($balanceData);
        $this->assertEquals($balanceEntityExpected, $balanceEntity);
    }

    public function provideBalanceData()
    {
        $balanceEntity = $this->makeEntity();
        return [
            [
                [
                    'userId' => '0abcdd94-5cfe-49f2-b64a-16e4e90eb585',
                    'balance' => 250.93
                ],
                $balanceEntity
            ]
        ];
    }

    private function setUpDependencies()
    {
        $balanceEntity = $this->makeEntity();
        $this->balanceEntity = $this->createMock(BalanceEntity::class);
        $this->balanceEntity
            ->method('setUserId')->willReturn($balanceEntity);
        $this->balanceEntity
            ->method('setBalance')->willReturn($balanceEntity);
    }

    private function makeEntity()
    {
        $balanceEntity = new BalanceEntity();
        $balanceEntity
            ->setUserId('0abcdd94-5cfe-49f2-b64a-16e4e90eb585')
            ->setBalance(250.93);
        return $balanceEntity;
    }
}
