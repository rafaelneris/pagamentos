<?php

namespace Tests\Domain\Transactions\Services;

use App\Domain\Transactions\Contracts\Services\AuthorizerServiceInterface;
use App\Domain\Transactions\Contracts\Services\NotifierServiceInterface;
use App\Domain\Transactions\Entities\TransactionEntity;
use App\Domain\Transactions\Services\TransferService;
use App\Domain\Users\Contracts\Mappers\DepositMapperInterface;
use App\Domain\Users\Contracts\Services\BalanceServiceInterface;
use App\Domain\Users\Entities\BalanceEntity;
use App\Domain\Users\Entities\DepositEntity;
use Tests\TestCase;

class TransferServiceTest extends TestCase
{
    private $depositMapper;

    private $authorizerService;

    private $notifierService;

    private $balanceService;

    private $depositEntity;

    private $transactionEntity;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->configureDependencies();
    }

    public function testTransfer()
    {
        $balanceEntity = $this->makeBalanceEntity();

        $depositMapper = clone $this->depositMapper;
        $authorizerService = clone $this->authorizerService;
        $notifierService = clone $this->notifierService;
        $balanceService = clone $this->balanceService;
        $depositEntity = clone $this->depositEntity;
        $transactionEntity = clone $this->transactionEntity;

        $balanceService->method('withDraw')->willReturn($balanceEntity);
        $transactionEntity->method('getPayer')->willReturn('6b1faf2e-fbb1-4af1-ab70-9471c2a0f046');
        $transactionEntity->method('getPayee')->willReturn('04efa1b0-c76d-436d-a459-363af805bb49');
        $transactionEntity->method('getValue')->willReturn(200.98);
        $balanceService->method('deposit')->willReturn(
            [
                'id' => '2f5f8fa1-f14f-4997-aa5c-8ddf6e5c9908',
                'payer' => '6b1faf2e-fbb1-4af1-ab70-9471c2a0f046',
                'payee' => '04efa1b0-c76d-436d-a459-363af805bb49',
                'value' => 200.98
            ]
        );
        $authorizerService->method('authorize')->willReturn(true);
        $notifierService->method('notify')->willReturn(true);
        $depositMapper->method('map')->willReturn($depositEntity);

        $transferService = new TransferService($balanceService, $authorizerService, $notifierService, $depositMapper);
        $return = $transferService->transfer($transactionEntity);
        $this->assertNull($return);
    }

    private function configureDependencies()
    {
        $this->depositMapper = $this->createMock(DepositMapperInterface::class);
        $this->authorizerService = $this->createMock(AuthorizerServiceInterface::class);
        $this->notifierService = $this->createMock(NotifierServiceInterface::class);
        $this->balanceService = $this->createMock(BalanceServiceInterface::class);
        $this->depositEntity = $this->createMock(DepositEntity::class);
        $this->transactionEntity = $this->createMock(TransactionEntity::class);
    }

    private function makeTransactionEntity()
    {
        $transactionEntity = new TransactionEntity();
        $transactionEntity
            ->setId('2f5f8fa1-f14f-4997-aa5c-8ddf6e5c9908')
            ->setPayer('6b1faf2e-fbb1-4af1-ab70-9471c2a0f046')
            ->setPayee('04efa1b0-c76d-436d-a459-363af805bb49')
            ->setValue(200.98);
        return $transactionEntity;
    }

    private function makeBalanceEntity()
    {
        $balanceEntity = new BalanceEntity();
        $balanceEntity
            ->setUserId('0abcdd94-5cfe-49f2-b64a-16e4e90eb585')
            ->setBalance(250.93);
        return $balanceEntity;
    }
}
